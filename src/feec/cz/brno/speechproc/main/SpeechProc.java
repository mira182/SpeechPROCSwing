package feec.cz.brno.speechproc.main;

import feec.cz.brno.speechproc.calc.api.runscript.PraatScript;
import feec.cz.brno.speechproc.calc.api.runscript.ScriptRunner;
import feec.cz.brno.speechproc.gui.formants.FormantParamsDialog;
import feec.cz.brno.speechproc.gui.soundlist.SoundFilesTableModel;
import feec.cz.brno.speechproc.visualize.FormantCharts;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author mira
 */
public class SpeechProc extends javax.swing.JFrame {

    private final static Logger logger = LogManager.getLogger(SpeechProc.class);

    private SoundFilesTableModel soundFilesTableModel = new SoundFilesTableModel();
    private TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(soundFilesTableModel);

    /**
     * Creates new form SpeechProc
     */
    public SpeechProc() {
        try {
            for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            logger.error("Cannot set Nimbus Look and feel.", e);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        praatScriptBtn = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        centerSplitPanel = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        addSoundFileBtn = new javax.swing.JButton();
        removeSoundFileBtn = new javax.swing.JButton();
        soundFilesListScrollPanel = new javax.swing.JScrollPane();
        soundFilesTable = new javax.swing.JTable();
        searchFileTextField = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();
        centerTabbedPanel = new javax.swing.JTabbedPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openSoundFilesMenuItem = new javax.swing.JMenuItem();
        praatScriptMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        formantsMenuItem = new javax.swing.JMenuItem();
        formant1MenuItem = new javax.swing.JMenuItem();
        formant2MenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Speech PROC");
        setMinimumSize(new java.awt.Dimension(1000, 800));
        setSize(new java.awt.Dimension(1078, 980));

        toolBar.setRollover(true);

        praatScriptBtn.setText("Run praat script");
        praatScriptBtn.setToolTipText("Run praat script...");
        praatScriptBtn.setFocusable(false);
        praatScriptBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        praatScriptBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        praatScriptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                praatScriptBtnActionPerformed(evt);
            }
        });
        toolBar.add(praatScriptBtn);

        getContentPane().add(toolBar, java.awt.BorderLayout.PAGE_START);

        bottomPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        bottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING));
        bottomPanel.add(progressBar);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        centerSplitPanel.setDividerLocation(300);
        centerSplitPanel.setResizeWeight(0.3);
        centerSplitPanel.setAutoscrolls(true);
        centerSplitPanel.setOneTouchExpandable(true);

        leftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input files", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        addSoundFileBtn.setText("Add");
        addSoundFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSoundFileBtnActionPerformed(evt);
            }
        });

        removeSoundFileBtn.setText("Remove");
        removeSoundFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSoundFileBtnActionPerformed(evt);
            }
        });

        soundFilesTableModel.setColumnIdentifiers(new String[] { "Name", "Path", "Size"});
        soundFilesTable.setModel(soundFilesTableModel);
        soundFilesTable.setRowSorter(rowSorter);
        soundFilesTable.setGridColor(new java.awt.Color(255, 255, 255));
        soundFilesTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        soundFilesListScrollPanel.setViewportView(soundFilesTable);

        searchFileTextField.getDocument().addDocumentListener(new DocumentListener(){

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = searchFileTextField.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = searchFileTextField.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });
        searchFileTextField.setMaximumSize(new java.awt.Dimension(2147483647, 32));

        searchLabel.setText("Search:");

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(soundFilesListScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addComponent(addSoundFileBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeSoundFileBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                        .addComponent(searchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(soundFilesListScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSoundFileBtn)
                    .addComponent(removeSoundFileBtn)))
        );

        centerSplitPanel.setLeftComponent(leftPanel);
        centerSplitPanel.setRightComponent(centerTabbedPanel);

        getContentPane().add(centerSplitPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openSoundFilesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openSoundFilesMenuItem.setText("Open sound files...");
        openSoundFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSoundFilesMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openSoundFilesMenuItem);

        praatScriptMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        praatScriptMenuItem.setMnemonic('s');
        praatScriptMenuItem.setText("Run praat script...");
        praatScriptMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                praatScriptMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(praatScriptMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Formants");

        formantsMenuItem.setMnemonic('t');
        formantsMenuItem.setText("Formants listing");
        formantsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formantsMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(formantsMenuItem);

        formant1MenuItem.setMnemonic('t');
        formant1MenuItem.setText("Formant 1");
        formant1MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formant1MenuItemActionPerformed(evt);
            }
        });
        editMenu.add(formant1MenuItem);

        formant2MenuItem.setMnemonic('t');
        formant2MenuItem.setText("Formant 2");
        formant2MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formant2MenuItemActionPerformed(evt);
            }
        });
        editMenu.add(formant2MenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void formantsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formantsMenuItemActionPerformed
        runFormantsListing();
    }//GEN-LAST:event_formantsMenuItemActionPerformed

    private void removeSoundFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSoundFileBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_removeSoundFileBtnActionPerformed

    private void openSoundFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSoundFilesMenuItemActionPerformed
        addSoundFiles();
    }//GEN-LAST:event_openSoundFilesMenuItemActionPerformed

    private void addSoundFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSoundFileBtnActionPerformed
        addSoundFiles();
    }//GEN-LAST:event_addSoundFileBtnActionPerformed

    private void praatScriptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_praatScriptBtnActionPerformed
        runPraatScript();
    }//GEN-LAST:event_praatScriptBtnActionPerformed

    private void praatScriptMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_praatScriptMenuItemActionPerformed
        runPraatScript();
    }//GEN-LAST:event_praatScriptMenuItemActionPerformed

    private void formant1MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formant1MenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formant1MenuItemActionPerformed

    private void formant2MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formant2MenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_formant2MenuItemActionPerformed

    private void runFormantsListing() {
        List<File> soundFiles = getSelectedSoundFiles();
        Map<String, Object> parameters = new HashMap<>();
        if (soundFiles.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No sound file selected!", "No file.", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        FormantParamsDialog paramsDialog = new FormantParamsDialog(this, true);
        paramsDialog.setVisible(true);
        parameters.put("timeStep", paramsDialog.getTimeStep());
        parameters.put("maxFormantsNumber", paramsDialog.getMaxFormantNumber());
        parameters.put("maxFormants", paramsDialog.getMaxFormants());
        parameters.put("windowLength", paramsDialog.getWindowLength());
        parameters.put("preemphasis", paramsDialog.getPreemphasis());

        if (paramsDialog.isOk()) {
            for (File soundFile : soundFiles) {

                parameters.put("soundFilePath", soundFile.getAbsolutePath());

//            parameters.add(soundFile.getCanonicalPath().replaceFirst(soundFile.getName(), "test.csv"));
                parameters.put("outputFile", "./formantsListings.csv");

                PraatScript praat = new PraatScript(new File(getClass().getClassLoader().getResource("praat/formants.praat").getFile()), parameters);
                String cmdOutput = praat.runScript();

                logger.debug("Command line output: {}", cmdOutput);

                JOptionPane.showMessageDialog(this, "Praat script has finished successfully.", "Success!", JOptionPane.INFORMATION_MESSAGE);

                // TODO show only for wanted files => on button press or something
                FormantCharts graph = new FormantCharts();
                centerTabbedPanel.add("Formants listing", graph.createFormantChart(new File("formantsListings.csv"), true, true, false));
            }
        }
    }

    private void addSoundFiles() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setDialogTitle("Open sound file");
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Sound files (*.wav, *.mp3)", "wav", "mp3"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            List<File> list = new ArrayList<>(Arrays.asList(fileChooser.getSelectedFiles()));
            list.forEach(file -> {
                logger.debug("Opening sound file: {}", file.getAbsoluteFile());
                soundFilesTableModel.addRow(file);
            });
        } else {
            logger.debug("Open sound files cancelled by user.");
        }
    }

    private void runPraatScript() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Open praat script");
        fileChooser.setMultiSelectionEnabled(rootPaneCheckingEnabled);
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Praat script (*.praat)", "praat"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            Map<String, Object> parameters = new HashMap<>();
            File praatScript = fileChooser.getSelectedFile();
            List<File> soundFiles = getSelectedSoundFiles();

            if (soundFiles.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No sound file selected!", "No file.", JOptionPane.WARNING_MESSAGE);
                return;
            }

            for (File soundFile : soundFiles) {

                parameters.put("soundFilePath", soundFile.getAbsolutePath());

//            parameters.add(soundFile.getCanonicalPath().replaceFirst(soundFile.getName(), "test.csv"));
                parameters.put("outputFile", "./formantsListings.csv");

                ScriptRunner praat = new PraatScript(praatScript, parameters);
                String cmdOutput = praat.runScript();

                logger.debug("Command line output: {}", cmdOutput);

                JOptionPane.showMessageDialog(this, "Praat script has finished successfully.", "Success!", JOptionPane.INFORMATION_MESSAGE);

                FormantCharts graph = new FormantCharts();
                centerTabbedPanel.add("Formants listing", graph.createFormantChart(new File("formantsListings.csv"), true, false, false));
            }
        }
    }

    private List<File> getSelectedSoundFiles() {
        List<File> selectedSoundFiles = new ArrayList<>();
        File soundFile;

        for (int i = 0; i < soundFilesTable.getSelectedRows().length; i++) {
            soundFile = (File) soundFilesTableModel.getFileFromRow(soundFilesTable.getSelectedRows()[i]);
            selectedSoundFiles.add(soundFile);
        }

        return selectedSoundFiles;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpeechProc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SpeechProc().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addSoundFileBtn;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JSplitPane centerSplitPanel;
    private javax.swing.JTabbedPane centerTabbedPanel;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem formant1MenuItem;
    private javax.swing.JMenuItem formant2MenuItem;
    private javax.swing.JMenuItem formantsMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openSoundFilesMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JButton praatScriptBtn;
    private javax.swing.JMenuItem praatScriptMenuItem;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton removeSoundFileBtn;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JTextField searchFileTextField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JScrollPane soundFilesListScrollPanel;
    private javax.swing.JTable soundFilesTable;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

}
