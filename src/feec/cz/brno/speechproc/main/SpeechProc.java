package feec.cz.brno.speechproc.main;

import feec.cz.brno.speechproc.calc.runscripts.MatlabScript;
import feec.cz.brno.speechproc.calc.runscripts.OctaveScript;
import feec.cz.brno.speechproc.calc.runscripts.PraatScript;
import feec.cz.brno.speechproc.calc.runscripts.ScriptRunException;
import feec.cz.brno.speechproc.calc.runscripts.ScriptRunner;
import feec.cz.brno.speechproc.calc.swingworkers.f0.F0Impl;
import feec.cz.brno.speechproc.calc.swingworkers.formants.FormantsImpl;
import feec.cz.brno.speechproc.calc.swingworkers.intensity.IntensityImpl;
import feec.cz.brno.speechproc.gui.help.HelpWindow;
import feec.cz.brno.speechproc.gui.icons.Icons;
import feec.cz.brno.speechproc.gui.parameters.JTabbedPaneCloseButton;
import feec.cz.brno.speechproc.gui.parameters.f0.F0ParamsDialog;
import feec.cz.brno.speechproc.gui.parameters.formants.FormantParamsDialog;
import feec.cz.brno.speechproc.gui.parameters.results.ResultPanel;
import feec.cz.brno.speechproc.gui.settings.Settings;
import feec.cz.brno.speechproc.gui.settings.SettingsDialog;
import feec.cz.brno.speechproc.gui.soundlist.SoundFilesTableModel;
import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.apache.commons.io.FileUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import static feec.cz.brno.speechproc.calc.swingworkers.f0.IF0.OUTPUT_FOLDER_F0;
import static feec.cz.brno.speechproc.calc.swingworkers.formants.IFormants.OUTPUT_FOLDER_FORMANTS;
import static feec.cz.brno.speechproc.calc.swingworkers.intensity.IIntensity.OUTPUT_FOLDER_INTENSITY;

/**
 *
 * @author mira
 */
public class SpeechProc extends javax.swing.JFrame {

    private final static Logger logger = LogManager.getLogger(SpeechProc.class);
    
    public static final String FS = System.getProperty("file.separator");
    public static final String USER_DIR = System.getProperty("user.dir");
    public static final String OS = System.getProperty("os.name").toLowerCase();

    private SoundFilesTableModel soundFilesTableModel = new SoundFilesTableModel();
    private TableRowSorter<TableModel> searchFieldRowSorter = new TableRowSorter<>(soundFilesTableModel);
    
    private FormantsImpl formantsTask;
    private F0Impl f0Task;
    private IntensityImpl intensityTask;
    
    // HELP
    private HelpWindow helpWindow;
    
    // SETTINGS
    private SettingsDialog settingsDialog;

    /**
     * Creates new form SpeechProc
     */
    public SpeechProc() {
        try {
            for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            logger.error("Cannot set Nimbus Look and feel.", e);
        }
        logger.info("Initializing components.");
        initComponents();
        defaultSettings();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        addSoundButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        settingsButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        praatScriptButton = new javax.swing.JButton();
        matlabScriptButton = new javax.swing.JButton();
        octaveScriptButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        formantsToolbarButton = new javax.swing.JButton();
        f0ToolbarButton = new javax.swing.JButton();
        intensityToolbarButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        helpButton = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        progressLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        centerSplitPanel = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        addSoundFileBtn = new javax.swing.JButton();
        removeSoundFileBtn = new javax.swing.JButton();
        soundFilesListScrollPanel = new javax.swing.JScrollPane();
        soundFilesTable = new javax.swing.JTable();
        searchFileTextField = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();
        centerTabbedPanel = new JTabbedPaneCloseButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openSoundFilesMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        settingsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        f0MenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        intensityMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        formantsMenuItem = new javax.swing.JMenuItem();
        scriptsMenu = new javax.swing.JMenu();
        matlabScriptMenuItem = new javax.swing.JMenuItem();
        octaveScriptMenuItem = new javax.swing.JMenuItem();
        praatScriptMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Speech PROC");
        setMinimumSize(new java.awt.Dimension(1200, 800));
        setSize(new java.awt.Dimension(1078, 980));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        toolBar.setRollover(true);

        addSoundButton.setIcon(Icons.ADD_SOUND_ICON);
        addSoundButton.setToolTipText("Add sound files");
        addSoundButton.setFocusable(false);
        addSoundButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addSoundButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addSoundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSoundButtonActionPerformed(evt);
            }
        });
        toolBar.add(addSoundButton);

        saveButton.setIcon(Icons.SAVE_ICON);
        saveButton.setToolTipText("Save as...");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        toolBar.add(saveButton);

        settingsButton.setIcon(Icons.SETTINGS_ICON);
        settingsButton.setToolTipText("Settings");
        settingsButton.setFocusable(false);
        settingsButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        settingsButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });
        toolBar.add(settingsButton);
        toolBar.add(jSeparator2);

        praatScriptButton.setIcon(Icons.PRAAT_ICON);
        praatScriptButton.setToolTipText("Run praat script...");
        praatScriptButton.setFocusable(false);
        praatScriptButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        praatScriptButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        praatScriptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                praatScriptButtonActionPerformed(evt);
            }
        });
        toolBar.add(praatScriptButton);

        matlabScriptButton.setIcon(Icons.MATLAB_ICON);
        matlabScriptButton.setToolTipText("Run matlab script...");
        matlabScriptButton.setFocusable(false);
        matlabScriptButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        matlabScriptButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        matlabScriptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matlabScriptButtonActionPerformed(evt);
            }
        });
        toolBar.add(matlabScriptButton);

        octaveScriptButton.setIcon(Icons.OCTAVE_ICON);
        octaveScriptButton.setToolTipText("Run octave script");
        octaveScriptButton.setFocusable(false);
        octaveScriptButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        octaveScriptButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        octaveScriptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                octaveScriptButtonActionPerformed(evt);
            }
        });
        toolBar.add(octaveScriptButton);
        toolBar.add(jSeparator1);

        formantsToolbarButton.setText("Formants");
        formantsToolbarButton.setToolTipText("Formants listing");
        formantsToolbarButton.setFocusable(false);
        formantsToolbarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        formantsToolbarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formantsToolbarButtonActionPerformed(evt);
            }
        });
        toolBar.add(formantsToolbarButton);

        f0ToolbarButton.setText("Voice report");
        f0ToolbarButton.setToolTipText("Voice report");
        f0ToolbarButton.setFocusable(false);
        f0ToolbarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        f0ToolbarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        f0ToolbarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                f0ToolbarButtonActionPerformed(evt);
            }
        });
        toolBar.add(f0ToolbarButton);

        intensityToolbarButton.setText("Intensity");
        intensityToolbarButton.setToolTipText("Intensity");
        intensityToolbarButton.setFocusable(false);
        intensityToolbarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        intensityToolbarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        intensityToolbarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intensityToolbarButtonActionPerformed(evt);
            }
        });
        toolBar.add(intensityToolbarButton);
        toolBar.add(jSeparator3);

        helpButton.setIcon(Icons.HELP_ICON);
        helpButton.setToolTipText("Help");
        helpButton.setFocusable(false);
        helpButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        helpButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        toolBar.add(helpButton);

        getContentPane().add(toolBar, java.awt.BorderLayout.PAGE_START);

        bottomPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        bottomPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.TRAILING));
        bottomPanel.add(progressLabel);

        progressBar.setStringPainted(true);
        bottomPanel.add(progressBar);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        centerSplitPanel.setDividerLocation(300);
        centerSplitPanel.setResizeWeight(0.3);
        centerSplitPanel.setAutoscrolls(true);
        centerSplitPanel.setOneTouchExpandable(true);

        leftPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Input files", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        addSoundFileBtn.setIcon(Icons.PLUS_ICON);
        addSoundFileBtn.setToolTipText("Add file");
        addSoundFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSoundFileBtnActionPerformed(evt);
            }
        });

        removeSoundFileBtn.setIcon(Icons.MINUS_ICON);
        removeSoundFileBtn.setToolTipText("Remove file");
        removeSoundFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSoundFileBtnActionPerformed(evt);
            }
        });

        soundFilesTableModel.setColumnIdentifiers(new String[] { "Name", "Path", "Size"});
        for (int column = 0; column < soundFilesTable.getColumnCount(); column++) {
            soundFilesTableModel.addColumn(soundFilesTable.getColumnName(column));
        }
        soundFilesTable.setAutoCreateRowSorter(true);
        soundFilesTable.setModel(soundFilesTableModel);
        soundFilesTable.setRowSorter(searchFieldRowSorter);
        soundFilesTable.setGridColor(new java.awt.Color(255, 255, 255));
        soundFilesTable.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        soundFilesTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                soundFilesTableKeyReleased(evt);
            }
        });
        soundFilesListScrollPanel.setViewportView(soundFilesTable);

        searchFileTextField.getDocument().addDocumentListener(new DocumentListener(){

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = searchFileTextField.getText();

                if (text.trim().length() == 0) {
                    searchFieldRowSorter.setRowFilter(null);
                } else {
                    searchFieldRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = searchFileTextField.getText();

                if (text.trim().length() == 0) {
                    searchFieldRowSorter.setRowFilter(null);
                } else {
                    searchFieldRowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });
        searchFileTextField.setMaximumSize(new java.awt.Dimension(2147483647, 32));

        searchLabel.setText("Search:");

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(soundFilesListScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftPanelLayout.createSequentialGroup()
                        .addComponent(addSoundFileBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeSoundFileBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                        .addComponent(searchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchFileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(soundFilesListScrollPanel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSoundFileBtn)
                    .addComponent(removeSoundFileBtn)))
        );

        centerSplitPanel.setLeftComponent(leftPanel);

        centerTabbedPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                centerTabbedPanelKeyPressed(evt);
            }
        });
        centerSplitPanel.setRightComponent(centerTabbedPanel);

        getContentPane().add(centerSplitPanel, java.awt.BorderLayout.CENTER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openSoundFilesMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openSoundFilesMenuItem.setText("Open sound files...");
        openSoundFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSoundFilesMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openSoundFilesMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        settingsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        settingsMenuItem.setText("Settings");
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(settingsMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Parameters");

        jMenu1.setText("Phonation");

        f0MenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        f0MenuItem.setMnemonic('p');
        f0MenuItem.setText("Voice report");
        f0MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                f0MenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(f0MenuItem);

        editMenu.add(jMenu1);

        jMenu2.setText("Prosody");

        intensityMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        intensityMenuItem.setMnemonic('d');
        intensityMenuItem.setText("Loudness");
        intensityMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intensityMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(intensityMenuItem);

        editMenu.add(jMenu2);

        jMenu3.setText("Tongue position");

        formantsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        formantsMenuItem.setMnemonic('t');
        formantsMenuItem.setText("Formants listing");
        formantsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                formantsMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(formantsMenuItem);

        editMenu.add(jMenu3);

        menuBar.add(editMenu);

        scriptsMenu.setText("Scripts");

        matlabScriptMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        matlabScriptMenuItem.setText("Run matlab script");
        matlabScriptMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matlabScriptMenuItemActionPerformed(evt);
            }
        });
        scriptsMenu.add(matlabScriptMenuItem);

        octaveScriptMenuItem.setText("Run octave script");
        octaveScriptMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                octaveScriptMenuItemActionPerformed(evt);
            }
        });
        scriptsMenu.add(octaveScriptMenuItem);

        praatScriptMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        praatScriptMenuItem.setMnemonic('s');
        praatScriptMenuItem.setText("Run praat script...");
        praatScriptMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                praatScriptMenuItemActionPerformed(evt);
            }
        });
        scriptsMenu.add(praatScriptMenuItem);

        menuBar.add(scriptsMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        exit();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void formantsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formantsMenuItemActionPerformed
        calculateFormants();
    }//GEN-LAST:event_formantsMenuItemActionPerformed

    private void removeSoundFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSoundFileBtnActionPerformed
        removeSelectedRows();
    }//GEN-LAST:event_removeSoundFileBtnActionPerformed

    private void openSoundFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSoundFilesMenuItemActionPerformed
        addSoundFiles();
    }//GEN-LAST:event_openSoundFilesMenuItemActionPerformed

    private void addSoundFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSoundFileBtnActionPerformed
        addSoundFiles();
    }//GEN-LAST:event_addSoundFileBtnActionPerformed

    private void praatScriptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_praatScriptButtonActionPerformed
        runPraatScript();
    }//GEN-LAST:event_praatScriptButtonActionPerformed

    private void praatScriptMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_praatScriptMenuItemActionPerformed
        runPraatScript();
    }//GEN-LAST:event_praatScriptMenuItemActionPerformed

    private void f0MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f0MenuItemActionPerformed
        calculateF0();
    }//GEN-LAST:event_f0MenuItemActionPerformed

    private void soundFilesTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_soundFilesTableKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            removeSelectedRows();
        }
    }//GEN-LAST:event_soundFilesTableKeyReleased

    private void centerTabbedPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_centerTabbedPanelKeyPressed
        if (evt.isControlDown() && evt.getKeyCode() == KeyEvent.VK_W) {
            centerTabbedPanel.remove(centerTabbedPanel.getSelectedIndex());
        }
    }//GEN-LAST:event_centerTabbedPanelKeyPressed

    private void contentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsMenuItemActionPerformed
        showHelp();
    }//GEN-LAST:event_contentsMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exit();
    }//GEN-LAST:event_formWindowClosing

    private void formantsToolbarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formantsToolbarButtonActionPerformed
        calculateFormants();
    }//GEN-LAST:event_formantsToolbarButtonActionPerformed

    private void f0ToolbarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_f0ToolbarButtonActionPerformed
        calculateF0();
    }//GEN-LAST:event_f0ToolbarButtonActionPerformed

    private void intensityToolbarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intensityToolbarButtonActionPerformed
        calculateIntensity();
    }//GEN-LAST:event_intensityToolbarButtonActionPerformed

    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed
        showSettings();
    }//GEN-LAST:event_settingsMenuItemActionPerformed

    private void matlabScriptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matlabScriptButtonActionPerformed
        runMatlabScript();
    }//GEN-LAST:event_matlabScriptButtonActionPerformed

    private void octaveScriptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_octaveScriptButtonActionPerformed
        runOctaveScript();
    }//GEN-LAST:event_octaveScriptButtonActionPerformed

    private void matlabScriptMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matlabScriptMenuItemActionPerformed
        runMatlabScript();
    }//GEN-LAST:event_matlabScriptMenuItemActionPerformed

    private void octaveScriptMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_octaveScriptMenuItemActionPerformed
        runOctaveScript();
    }//GEN-LAST:event_octaveScriptMenuItemActionPerformed

    private void addSoundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSoundButtonActionPerformed
        addSoundFiles();
    }//GEN-LAST:event_addSoundButtonActionPerformed

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        showSettings();
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        showHelp();
    }//GEN-LAST:event_helpButtonActionPerformed

    private void intensityMenuItemActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        calculateIntensity();
    }                                                                                

    private void exit() {
        logger.info("Exiting...");
        deleteTempFiles();
        System.exit(0);
    }
    
    private void defaultSettings() {
        logger.info("Setting default settings");
        if (isWindows()) {
            logger.info("Default settings for WINDOWS.");
            Settings.getInstance().setPraatPath("C:\\Program Files\\praat.exe");
            Settings.getInstance().setMatlabPath("C:\\Program Files\\MATLAB\\MATLAB Production Server\\R2015a\\bin\\matlab.exe");
            Settings.getInstance().setOctavePath("C:\\Program Files\\octave.exe");
        } else if (isUnix()) {
            logger.info("Default settings for UNIX.");
            Settings.getInstance().setPraatPath("/usr/bin/praat");
            Settings.getInstance().setMatlabPath("/usr/bin/matlab");
            Settings.getInstance().setOctavePath("/usr/bin/octave");
        }
    }
    
    private void addSoundFiles() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setDialogTitle("Open sound file");
        // TODO use user.home
//        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setCurrentDirectory(new File("/media/mira/0f00c26e-7ed7-4b05-99c3-763797a05b44/mira/School/2016_17/DIPLOMKA/PAR_CZ_001/K1004/"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Sound files (*.wav, *.mp3)", "wav", "mp3"));
        
        logger.info("Adding sound files...");

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            List<File> list = new ArrayList<>(Arrays.asList(fileChooser.getSelectedFiles()));
            list.forEach(file -> {
                logger.debug("Opening sound file: {}", file.getAbsoluteFile());
                soundFilesTableModel.addRow(file);
            });
        } else {
            logger.trace("Open sound files cancelled by user.");
        }
    }
    
    private void removeSelectedRows() {
        if (soundFilesTable.getSelectedRowCount() > 0) {
            logger.info("Removing selected files from list");
            List<Vector> selectedRows = new ArrayList<>(25);
            Vector rowData = soundFilesTableModel.getDataVector();
            for (int row : soundFilesTable.getSelectedRows()) {
                int modelRow = soundFilesTable.convertRowIndexToModel(row);
                Vector rowValue = (Vector) rowData.get(modelRow);
                selectedRows.add(rowValue);
            }

            for (Vector rowValue : selectedRows) {
                int rowIndex = rowData.indexOf(rowValue);
                soundFilesTableModel.removeRow(rowIndex);
            }
        }
    }

    private void runPraatScript() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Open praat script");
        fileChooser.setMultiSelectionEnabled(rootPaneCheckingEnabled);
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Praat script (*.praat)", "praat"));
        
        logger.info("Selecting PRAAT script.");

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File praatScript = fileChooser.getSelectedFile();
            ScriptRunner praat = new PraatScript(praatScript, null);
            try {
                praat.runScript();
            } catch (IOException | InterruptedException | ScriptRunException ex) {
                logger.error("Praat script run has failed: ", ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
                return;
            }

            JOptionPane.showMessageDialog(this, "Praat script has finished successfully.", "Success!", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void runMatlabScript() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Open matlab script");
        fileChooser.setMultiSelectionEnabled(rootPaneCheckingEnabled);
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Matlab script (*.m)", "m"));
        
        logger.info("Selecting MATLAB script.");

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File matlabScript = fileChooser.getSelectedFile();
            ScriptRunner matlab = new MatlabScript(matlabScript, null);
            try {
                matlab.runScript();
            } catch (IOException | InterruptedException | ScriptRunException ex) {
                logger.error("Matlab script run has failed: ", ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
                return;
            }

            JOptionPane.showMessageDialog(this, "Matlab script has finished successfully.", "Success!", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    private void runOctaveScript() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Open octave script");
        fileChooser.setMultiSelectionEnabled(rootPaneCheckingEnabled);
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(new FileNameExtensionFilter("Octave script (*.octave)", "octave"));
        
        logger.info("Selecting OCTAVE script.");

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File octaveScript = fileChooser.getSelectedFile();
            ScriptRunner octave = new OctaveScript(octaveScript, null);
            try {
                octave.runScript();
            } catch (IOException | InterruptedException | ScriptRunException ex) {
                logger.error("Octave script run has failed: ", ex);
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
                return;
            }

            JOptionPane.showMessageDialog(this, "Octave script has finished successfully.", "Success!", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private List<File> getSelectedSoundFiles() {
        List<File> selectedSoundFiles = new ArrayList<>();
        File soundFile;

        for (int i = 0; i < soundFilesTable.getSelectedRows().length; i++) {
            soundFile = (File) soundFilesTableModel.getFileFromRow(soundFilesTable.getSelectedRows()[i]);
            selectedSoundFiles.add(soundFile);
        }
        logger.debug("Getting selected files: {}", selectedSoundFiles);

        return selectedSoundFiles;
    }
    
    private void deleteTempFiles() {
        try {
            FileUtils.deleteDirectory(OUTPUT_FOLDER_F0);
            FileUtils.deleteDirectory(OUTPUT_FOLDER_INTENSITY);
            FileUtils.deleteDirectory(OUTPUT_FOLDER_FORMANTS);
            logger.info("Deleted folders with csv files.");
        } catch (IOException ex) {
            logger.error("Deleting calculated CSV files failed!", ex);
        }
    }
    
    private void showSettings() {
        if (settingsDialog == null) {
            settingsDialog = new SettingsDialog(this);
            settingsDialog.setVisible(true);
        } else {
            settingsDialog.setVisible(true);
        }
    }
    
    private void showHelp() {
        if (helpWindow == null) {
            helpWindow = new HelpWindow();
            helpWindow.setVisible(true);
        } else {
            helpWindow.setVisible(true);
        }
    }
    
    public static boolean isWindows() {
        return (OS.indexOf("win") >= 0);
    }

    public static boolean isMac() {
        return (OS.indexOf("mac") >= 0);
    }

    public static boolean isUnix() {
        return (OS.indexOf("nix") >= 0 || OS.indexOf("nux") >= 0 || OS.indexOf("aix") > 0);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SpeechProc.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new SpeechProc().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton addSoundButton;
    private javax.swing.JButton addSoundFileBtn;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JSplitPane centerSplitPanel;
    private javax.swing.JTabbedPane centerTabbedPanel;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem f0MenuItem;
    private javax.swing.JButton f0ToolbarButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem formantsMenuItem;
    private javax.swing.JButton formantsToolbarButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem intensityMenuItem;
    private javax.swing.JButton intensityToolbarButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JButton matlabScriptButton;
    private javax.swing.JMenuItem matlabScriptMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton octaveScriptButton;
    private javax.swing.JMenuItem octaveScriptMenuItem;
    private javax.swing.JMenuItem openSoundFilesMenuItem;
    private javax.swing.JButton praatScriptButton;
    private javax.swing.JMenuItem praatScriptMenuItem;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressLabel;
    private javax.swing.JButton removeSoundFileBtn;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenu scriptsMenu;
    private javax.swing.JTextField searchFileTextField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JButton settingsButton;
    private javax.swing.JMenuItem settingsMenuItem;
    private javax.swing.JScrollPane soundFilesListScrollPanel;
    private javax.swing.JTable soundFilesTable;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    private void calculateF0() {
        List<File> soundFiles = getSelectedSoundFiles();

        if (soundFiles.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No sound file selected!", "No file.", JOptionPane.WARNING_MESSAGE);
            return;
        }

        F0ParamsDialog paramsDialog = new F0ParamsDialog(this);
        paramsDialog.setVisible(true);

        if (paramsDialog.isOk()) {
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            ResultPanel resultPanel = new ResultPanel();
            centerTabbedPanel.add("Voice report", resultPanel);
            centerTabbedPanel.setSelectedComponent(resultPanel);

            f0Task = new F0Impl(this, paramsDialog, soundFiles, resultPanel.getResultTableModel(), progressLabel);
            progressBar.setValue(0);
            f0Task.addPropertyChangeListener((PropertyChangeEvent evt1) -> {
                if ("progress".equals(evt1.getPropertyName())) {
                    int progress = (Integer) evt1.getNewValue();
                    progressBar.setValue(progress);
                }
            });
            f0Task.execute();
        }
    }

    private void calculateFormants() {
        List<File> soundFiles = getSelectedSoundFiles();

        if (soundFiles.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No sound file selected!", "No file.", JOptionPane.WARNING_MESSAGE);
            return;
        }

        FormantParamsDialog paramsDialog = new FormantParamsDialog(this);
        paramsDialog.setVisible(true);

        if (paramsDialog.isOk()) {

            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

            ResultPanel resultPanel = new ResultPanel();
            centerTabbedPanel.add("Formants", resultPanel);
            centerTabbedPanel.setSelectedComponent(resultPanel);

            formantsTask = new FormantsImpl(this, paramsDialog, soundFiles, resultPanel.getResultTableModel(), progressLabel);
            progressBar.setValue(0);
            formantsTask.addPropertyChangeListener((PropertyChangeEvent evt1) -> {
                if ("progress".equals(evt1.getPropertyName())) {
                    int progress = (Integer) evt1.getNewValue();
                    progressBar.setValue(progress);
                }
            });
            formantsTask.execute();
        }
    }

    private void calculateIntensity() {
        List<File> soundFiles = getSelectedSoundFiles();

        if (soundFiles.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No sound file selected!", "No file.", JOptionPane.WARNING_MESSAGE);
            return;
        }

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        ResultPanel resultPanel = new ResultPanel();
        centerTabbedPanel.add("Intensity", resultPanel);
        centerTabbedPanel.setSelectedComponent(resultPanel);

        intensityTask = new IntensityImpl(this, soundFiles, resultPanel.getResultTableModel(), progressLabel);
        progressBar.setValue(0);
        intensityTask.addPropertyChangeListener((PropertyChangeEvent evt1) -> {
            if ("progress".equals(evt1.getPropertyName())) {
                int progress = (Integer) evt1.getNewValue();
                progressBar.setValue(progress);
            }
        });
        intensityTask.execute();
    }

}
