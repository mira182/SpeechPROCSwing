/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package feec.cz.brno.speechproc.gui.help;

import java.io.IOException;
import java.net.URL;
import javax.swing.JTree;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author mira
 */
public class HelpWindow extends javax.swing.JFrame implements TreeSelectionListener {
    
    private final static Logger logger = LogManager.getLogger(HelpWindow.class);
    
    private JTree helpTree;
    private URL helpURL;
    private DefaultMutableTreeNode top = new DefaultMutableTreeNode("Help");

    /**
     * Creates new form HelpWindow
     */
    public HelpWindow() {
        initTree();
        initComponents();
        logger.info("Help window displayed.");
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        leftScrollPane = new javax.swing.JScrollPane(helpTree);
        rightScrollPane = new javax.swing.JScrollPane();
        htmlEditorPane = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Help");

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setLeftComponent(leftScrollPane);

        htmlEditorPane.setEditable(false);
        htmlEditorPane.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                htmlEditorPaneHyperlinkUpdate(evt);
            }
        });
        rightScrollPane.setViewportView(htmlEditorPane);

        jSplitPane1.setRightComponent(rightScrollPane);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void htmlEditorPaneHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_htmlEditorPaneHyperlinkUpdate
        if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
            logger.debug("Activated hyperlink: {}", evt.getURL());
            for (int i = 0; i < helpTree.getRowCount(); i++) {
                selectNodeWithURL(top, evt.getURL());
            }
        }
    }//GEN-LAST:event_htmlEditorPaneHyperlinkUpdate

    private void selectNodeWithURL(DefaultMutableTreeNode node, URL url) {
        int childCount = node.getChildCount();

        for (int i = 0; i < childCount; i++) {
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) node.getChildAt(i);
            if (childNode.getChildCount() > 0) {
                selectNodeWithURL(childNode, url);
            } else {
                HelpNodeInfo nodeInfo = (HelpNodeInfo) childNode.getUserObject();
                if (nodeInfo.getUrl().equals(url)) {
                    TreeNode[] nodes = ((DefaultTreeModel) helpTree.getModel()).getPathToRoot(childNode);
                    TreePath tpath = new TreePath(nodes);
                    helpTree.scrollPathToVisible(tpath);
                    helpTree.setSelectionPath(tpath);
                }
            }
        }
    }
        
    private void initTree() {
        //Create the nodes.
        createNodes(top);

        //Create a tree that allows one selection at a time.
        helpTree = new JTree(top);
        helpTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        //Listen for when the selection changes.
        helpTree.addTreeSelectionListener(this);
        
        for (int i = 0; i < helpTree.getRowCount(); i++) {
            helpTree.expandRow(i);
        }
    }
    
    private void displayURL(URL url) {
        try {
            if (url != null) {
                htmlEditorPane.setPage(url);
            } else { //null url
                htmlEditorPane.setText("File Not Found");
            }
        } catch (IOException e) {
            logger.error("Attempted to read a bad URL: " + url, e);
        }
    }
    
    private void createNodes(DefaultMutableTreeNode top) {
        DefaultMutableTreeNode category = null;
        DefaultMutableTreeNode subCategory = null;
        DefaultMutableTreeNode book = null;

        category = new DefaultMutableTreeNode("Parameters calculation");
        top.add(category);

        // Formant param
        book = new DefaultMutableTreeNode(new HelpNodeInfo("Formants", "/help/parameters/formants.html"));
        category.add(book);

        // F0 param
        book = new DefaultMutableTreeNode(new HelpNodeInfo("Fundamental frequency", "/help/parameters/f0.html"));
        category.add(book);

        // Intensity param
        book = new DefaultMutableTreeNode(new HelpNodeInfo("Intensity", "/help/parameters/intensity.html"));
        category.add(book);

        // RESULTS
        category = new DefaultMutableTreeNode("Results");
        top.add(category);
        
        // Result panel
        book = new DefaultMutableTreeNode(new HelpNodeInfo("Result panel", "/help/components/resultPanel.html"));
        category.add(book);
        
        // Sound file list
        book = new DefaultMutableTreeNode(new HelpNodeInfo("Sound file list", "/help/components/soundFileList.html"));
        category.add(book);
        
        // RESULT DETAILS
        subCategory = new DefaultMutableTreeNode("Result details");
        category.add(subCategory);
        
        // Formants result details
        book = new DefaultMutableTreeNode(new HelpNodeInfo("Formants", "/help/components/resultdetails/formantResultDetails.html"));
        subCategory.add(book);
        
        // F0 result details
        book = new DefaultMutableTreeNode(new HelpNodeInfo("Voice report", "/help/components/resultdetails/f0ResultDetails.html"));
        subCategory.add(book);
        
        // Intensity result details
        book = new DefaultMutableTreeNode(new HelpNodeInfo("Intensity", "/help/components/resultdetails/intensityResultDetails.html"));
        subCategory.add(book);
        
        // Settings
        book = new DefaultMutableTreeNode(new HelpNodeInfo("Settings", "/help/components/settings.html"));
        top.add(book);
        
        // COMPONENTS
        category = new DefaultMutableTreeNode("Components");
        top.add(category);
        
        // Toolbar
        book = new DefaultMutableTreeNode(new HelpNodeInfo("Toolbar", "/help/components/toolbar.html"));
        category.add(book);

        // 
//        book = new DefaultMutableTreeNode(new HelpNodeInfo("The Java Virtual Machine Specification", "vm.html"));
//        category.add(book);
    }
    
    @Override
    public void valueChanged(TreeSelectionEvent e) {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) helpTree.getLastSelectedPathComponent();

        if (node == null) {
            return;
        }

        Object nodeInfo = node.getUserObject();
        if (node.isLeaf()) {
            HelpNodeInfo helpNodeInfo = (HelpNodeInfo) nodeInfo;
            displayURL(helpNodeInfo.getUrl());
        } else {
            displayURL(helpURL);
        }
        logger.debug("Selected node \"" + node.toString() + "\"");
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane htmlEditorPane;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JScrollPane leftScrollPane;
    private javax.swing.JScrollPane rightScrollPane;
    // End of variables declaration//GEN-END:variables


    class HelpNodeInfo {
        private final String name;
        private final URL url;

        public HelpNodeInfo(String name, String fileName) {
            this.name = name;
            url = HelpWindow.class.getClassLoader().getClass().getResource(fileName);
            if (url == null) {
                logger.warn("Couldn't find file: " + fileName);
            }
        }

        public String getName() {
            return name;
        }

        public URL getUrl() {
            return url;
        }

        @Override
        public String toString() {
            return this.name;
        }
    }
}
